// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go
//
// Generated by this command:
//
//	mockgen -source=resolver.go -package=mock_attachments -destination=./mock/mock_resolver.go
//

// Package mock_attachments is a generated GoMock package.
package mock_attachments

import (
	reflect "reflect"

	model "github.com/jackchuka/confluence-md/internal/confluence/model"
	gomock "go.uber.org/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
	isgomock struct{}
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// DownloadAttachment mocks base method.
func (m *MockResolver) DownloadAttachment(page *model.ConfluencePage, filename string, revision int) (*model.ConfluenceAttachment, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAttachment", page, filename, revision)
	ret0, _ := ret[0].(*model.ConfluenceAttachment)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadAttachment indicates an expected call of DownloadAttachment.
func (mr *MockResolverMockRecorder) DownloadAttachment(page, filename, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAttachment", reflect.TypeOf((*MockResolver)(nil).DownloadAttachment), page, filename, revision)
}

// Resolve mocks base method.
func (m *MockResolver) Resolve(page *model.ConfluencePage, filename string, revision int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", page, filename, revision)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockResolverMockRecorder) Resolve(page, filename, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockResolver)(nil).Resolve), page, filename, revision)
}
